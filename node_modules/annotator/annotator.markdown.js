/*
** Annotator v2.0.0-dev-41928d6
** https://github.com/okfn/annotator/
**
** Copyright 2014, the Annotator project contributors.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-11 02:53:39Z
*/
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var n;"undefined"!=typeof window?n=window:"undefined"!=typeof global?n=global:"undefined"!=typeof self&&(n=self);var o=n;o=o.Annotator||(o.Annotator={}),o=o.Plugin||(o.Plugin={}),o.Markdown=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"4hR4NO":[function(_dereq_,module,exports){
(function (global){
var Annotator, self, _ref;

if (typeof self !== "undefined" && self !== null) {
  self = self;
}

if (typeof global !== "undefined" && global !== null) {
  if (self == null) {
    self = global;
  }
}

if (typeof window !== "undefined" && window !== null) {
  if (self == null) {
    self = window;
  }
}

Annotator = self != null ? self.Annotator : void 0;

if (Annotator == null) {
  Annotator = (self != null ? (_ref = self.define) != null ? _ref.amd : void 0 : void 0) ? self != null ? self.require('annotator') : void 0 : void 0;
}

if (typeof Annotator !== 'function') {
  throw new Error("Could not find Annotator! In a webpage context, please ensure that the Annotator script tag is loaded before any plugins.");
}

module.exports = Annotator;


}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"annotator":[function(_dereq_,module,exports){
module.exports=_dereq_('4hR4NO');
},{}],3:[function(_dereq_,module,exports){
var $, Annotator, Markdown,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Annotator = _dereq_('annotator');

$ = Annotator.Util.$;

Markdown = (function(_super) {
  __extends(Markdown, _super);

  function Markdown(element, options) {
    Markdown.__super__.constructor.apply(this, arguments);
    if ((typeof Showdown !== "undefined" && Showdown !== null ? Showdown.converter : void 0) != null) {
      Markdown.__super__.constructor.apply(this, arguments);
      this.converter = new Showdown.converter();
    } else {
      console.error(Annotator._t("To use the Markdown plugin, you must include Showdown into the page first."));
    }
  }

  Markdown.prototype.pluginInit = function() {
    return this.listenTo(this.annotator, 'annotationViewerTextField', this.updateTextField);
  };

  Markdown.prototype.updateTextField = function(field, annotation) {
    var text;
    text = Annotator.Util.escape(annotation.text || '');
    return $(field).html(this.convert(text));
  };

  Markdown.prototype.convert = function(text) {
    return this.converter.makeHtml(text);
  };

  return Markdown;

})(Annotator.Plugin);

Annotator.Plugin.register('Markdown', Markdown);

module.exports = Markdown;


},{}]},{},[3])

(3)
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGtnL2Fubm90YXRvci5tYXJrZG93bi5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIm5hbWVzcGFjZS5jb2ZmZWUiLCJwbHVnaW4vbWFya2Rvd24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQ0tBOzs7U0FBTyxJQUFQOzs7QUFDQTs7V0FBUTtHQUFSO0NBREE7O0FBRUE7O1dBQVE7R0FBUjtDQUZBOzs7OztFQU1BLHNCQUFhO0NBTmI7O0FBVUE7QUFDRSxRQUFVLFVBQU0sb0JBRGxCO0NBVkE7Ozs7Ozs7Ozs7QUNMQTs7OztZQUFZLFFBQVEsV0FBUixDQUFaOztDQUNBLEdBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQURuQjs7O0FBaUJFOztBQUFhLG9CQUFDLE9BQUQsRUFBVSxPQUFWO0FBQ1g7QUFDQSxRQUFHLDRGQUFIO0FBQ0U7TUFDQSxJQUFDLFVBQUQsR0FBaUIsWUFBUSxDQUFDLFNBQVQsRUFEakIsQ0FERjs7QUFJRSxhQUFPLENBQUMsS0FBUixDQUFjLFNBQVMsQ0FBQyxFQUFWLENBQWEsNEVBQWIsQ0FBZCxFQUpGO0tBRlc7R0FBYjs7cUJBU0EsYUFBWTtXQUNWLElBQUksQ0FBQyxRQUFMLENBQWMsSUFBQyxVQUFmLEVBQTBCLDJCQUExQixFQUF1RCxJQUFJLENBQUMsZUFBNUQsRUFEVTtHQVRaOztxQkF5QkEsa0JBQWlCLFNBQUMsS0FBRCxFQUFRLFVBQVI7QUFFZjtXQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBZixDQUFzQixVQUFVLENBQUMsSUFBWCxJQUFtQixFQUF6QyxDQUFQO1dBQ0EsRUFBRSxLQUFGLENBQVEsQ0FBQyxJQUFULENBQWMsSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFiLENBQWQsRUFIZTtHQXpCakI7O3FCQXdDQSxVQUFTLFNBQUMsSUFBRDtXQUNQLElBQUMsVUFBUyxDQUFDLFFBQVgsQ0FBb0IsSUFBcEIsRUFETztHQXhDVDs7OztHQVhxQixTQUFTLENBQUMsT0FOakM7O1NBNERTLENBQUMsTUFBTSxDQUFDLFFBQWpCLENBQTBCLFVBQTFCLEVBQXNDLFFBQXRDLENBNURBOztNQThETSxDQUFDLE9BQVAsR0FBaUIsUUE5RGpCIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIjIEluIG9yZGVyIHRvIGJ1aWxkIHBvcnRhYmxlIGV4dGVuc2lvbiBidW5kbGVzIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBBTUQgYW5kXG4jIHNjcmlwdCBjb25jYXRlbmF0aW9uIHBsdWdpbnMgYXJlIGJ1aWx0IHdpdGggdGhpcyBtb2R1bGUgYXMgJ2Fubm90YXRvcicuXG5cbiMgQW5ub3RhdG9yIHdpbGwgZXhwb3J0IGl0c2VsZiBnbG9iYWxseSB3aGVuIHRoZSBidWlsdCBVTUQgbW9kdWxlcyBhcmUgdXNlZCBpblxuIyBhIGxlZ2FjeSBlbnZpcm9ubWVudCBvZiBzaW1wbGUgc2NyaXB0IGNvbmNhdGVuYXRpb24uXG5zZWxmID0gc2VsZiBpZiBzZWxmP1xuc2VsZiA/PSBnbG9iYWwgaWYgZ2xvYmFsP1xuc2VsZiA/PSB3aW5kb3cgaWYgd2luZG93P1xuQW5ub3RhdG9yID0gc2VsZj8uQW5ub3RhdG9yXG5cbiMgSW4gYSBwdXJlIEFNRCBlbnZpcm9ubWVudCwgQW5ub3RhdG9yIG1heSBub3QgYmUgZXhwb3J0ZWQgZ2xvYmFsbHkuXG5Bbm5vdGF0b3IgPz0gaWYgc2VsZj8uZGVmaW5lPy5hbWQgdGhlbiBzZWxmPy5yZXF1aXJlKCdhbm5vdGF0b3InKVxuXG4jIElmIHdlIGhhdmVuJ3Qgc3VjY2Vzc2Z1bGx5IGxvYWRlZCBBbm5vdGF0b3IgYnkgdGhpcyBwb2ludCwgdGhlcmUncyBubyBwb2ludCBpblxuIyBnb2luZyBvbiB0byBsb2FkIHRoZSBwbHVnaW4sIHNvIHRocm93IGEgZmF0YWwgZXJyb3IuXG5pZiB0eXBlb2YgQW5ub3RhdG9yIGlzbnQgJ2Z1bmN0aW9uJ1xuICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBBbm5vdGF0b3IhIEluIGEgd2VicGFnZSBjb250ZXh0LCBwbGVhc2UgZW5zdXJlXG4gICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgQW5ub3RhdG9yIHNjcmlwdCB0YWcgaXMgbG9hZGVkIGJlZm9yZSBhbnkgcGx1Z2lucy5cIilcblxuIyBOb3RlOiB3aGVuIHdvcmtpbmcgaW4gYSBDb21tb25KUyBlbnZpcm9ubWVudCBhbmQgYnVuZGxpbmcgcmVxdWlyZW1lbnRzIGludG9cbiMgYXBwbGljYXRpb25zIHRoZW4gcmVxdWlyZSBjYWxscyBzaG91bGQgcmVmZXIgdG8gbW9kdWxlcyBmcm9tIHRoZSBucG0gbGliXG4jIGRpcmVjdG9yeSBvZiBhbm5vdGF0b3IgcGFja2FnZSBhbmQgYXZvaWQgdGhpcyBhbHRvZ2V0aGVyLlxubW9kdWxlLmV4cG9ydHMgPSBBbm5vdGF0b3JcbiIsIkFubm90YXRvciA9IHJlcXVpcmUoJ2Fubm90YXRvcicpXG4kID0gQW5ub3RhdG9yLlV0aWwuJFxuXG5cbiMgUGx1Z2luIHRoYXQgcmVuZGVycyBhbm5vdGF0aW9uIGNvbW1lbnRzIGRpc3BsYXllZCBpbiB0aGUgVmlld2VyIGluIE1hcmtkb3duLlxuIyBSZXF1aXJlcyBTaG93ZG93biBsaWJyYXJ5IHRvIGJlIHByZXNlbnQgaW4gdGhlIHBhZ2Ugd2hlbiBpbml0aWFsaXNlZC5cbmNsYXNzIE1hcmtkb3duIGV4dGVuZHMgQW5ub3RhdG9yLlBsdWdpblxuICAjIFB1YmxpYzogSW5pdGFpbGlzZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIE1hcmtkb3duIHBsdWdpbi5cbiAgI1xuICAjIGVsZW1lbnQgLSBUaGUgQW5ub3RhdG9yI2VsZW1lbnQuXG4gICMgb3B0aW9ucyAtIEFuIG9wdGlvbnMgT2JqZWN0ICh0aGVyZSBhcmUgY3VycmVudGx5IG5vIG9wdGlvbnMpLlxuICAjXG4gICMgRXhhbXBsZXNcbiAgI1xuICAjICAgcGx1Z2luID0gbmV3IEFubm90YXRvci5QbHVnaW4uTWFya2Rvd24oYW5ub3RhdG9yLmVsZW1lbnQpXG4gICNcbiAgIyBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIEFubm90YXRvci5QbHVnaW4uTWFya2Rvd24uXG4gIGNvbnN0cnVjdG9yOiAoZWxlbWVudCwgb3B0aW9ucykgLT5cbiAgICBzdXBlclxuICAgIGlmIFNob3dkb3duPy5jb252ZXJ0ZXI/XG4gICAgICBzdXBlclxuICAgICAgQGNvbnZlcnRlciA9IG5ldyBTaG93ZG93bi5jb252ZXJ0ZXIoKVxuICAgIGVsc2VcbiAgICAgIGNvbnNvbGUuZXJyb3IgQW5ub3RhdG9yLl90KFwiVG8gdXNlIHRoZSBNYXJrZG93biBwbHVnaW4sIHlvdSBtdXN0IGluY2x1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaG93ZG93biBpbnRvIHRoZSBwYWdlIGZpcnN0LlwiKVxuXG4gIHBsdWdpbkluaXQ6IC0+XG4gICAgdGhpcy5saXN0ZW5UbyhAYW5ub3RhdG9yLCAnYW5ub3RhdGlvblZpZXdlclRleHRGaWVsZCcsIHRoaXMudXBkYXRlVGV4dEZpZWxkKVxuXG4gICMgQW5ub3RhdG9yIGV2ZW50IGNhbGxiYWNrLiBEaXNwbGF5cyB0aGUgYW5ub3RhdGlvbi50ZXh0IGFzIGEgTWFya2Rvd25cbiAgIyByZW5kZXJlZCB2ZXJzaW9uLlxuICAjXG4gICMgZmllbGQgICAgICAtIFRoZSB2aWV3ZXIgZmllbGQgRWxlbWVudC5cbiAgIyBhbm5vdGF0aW9uIC0gVGhlIGFubm90YXRpb24gT2JqZWN0IGJlaW5nIGRpc3BsYXllZC5cbiAgI1xuICAjIEV4YW1wbGVzXG4gICNcbiAgIyAgICMgTm9ybWFsbHkgY2FsbGVkIGJ5IEFubm90YXRvciN2aWV3ZXIoKVxuICAjICAgcGx1Z2luLnVwZGF0ZVRleHRGaWVsZChmaWVsZCwge3RleHQ6ICdNeSBfbWFya2Rvd25fIGNvbW1lbnQnfSlcbiAgIyAgICQoZmllbGQpLmh0bWwoKSAjID0+IFJldHVybnMgXCJNeSA8ZW0+bWFya2Rvd248L2VtPiBjb21tZW50XCJcbiAgI1xuICAjIFJldHVybnMgbm90aGluZ1xuICB1cGRhdGVUZXh0RmllbGQ6IChmaWVsZCwgYW5ub3RhdGlvbikgLT5cbiAgICAjIEVzY2FwZSBhbnkgSFRNTCBpbiB0aGUgdGV4dCB0byBwcmV2ZW50IFhTUy5cbiAgICB0ZXh0ID0gQW5ub3RhdG9yLlV0aWwuZXNjYXBlKGFubm90YXRpb24udGV4dCB8fCAnJylcbiAgICAkKGZpZWxkKS5odG1sKHRoaXMuY29udmVydCh0ZXh0KSlcblxuICAjIENvbnZlcnRzIHByb3ZpZGVkIHRleHQgaW50byBtYXJrZG93bi5cbiAgI1xuICAjIHRleHQgLSBBIFN0cmluZyBvZiBNYXJrZG93biB0byByZW5kZXIgYXMgSFRNTC5cbiAgI1xuICAjIEV4YW1wbGVzXG4gICNcbiAgIyBwbHVnaW4uY29udmVydCgnVGhpcyBpcyBfdmVyeV8gYmFzaWMgW01hcmtkb3duXShodHRwOi8vZGFyaW5nZmlyZWJhbGwuY29tKScpXG4gICMgIyA9PiBSZXR1cm5zIFwiVGhpcyBpcyA8ZW0+dmVyeTxlbT4gYmFzaWMgPGEgaHJlZj1cImh0dHA6Ly8uLi5cIj5NYXJrZG93bjwvYT5cIlxuICAjXG4gICMgUmV0dXJucyBIVE1MIHN0cmluZy5cbiAgY29udmVydDogKHRleHQpIC0+XG4gICAgQGNvbnZlcnRlci5tYWtlSHRtbCB0ZXh0XG5cbkFubm90YXRvci5QbHVnaW4ucmVnaXN0ZXIoJ01hcmtkb3duJywgTWFya2Rvd24pXG5cbm1vZHVsZS5leHBvcnRzID0gTWFya2Rvd25cbiJdfQ==