/*
** Annotator v2.0.0-dev-41928d6
** https://github.com/okfn/annotator/
**
** Copyright 2014, the Annotator project contributors.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-11 02:53:35Z
*/
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var n;"undefined"!=typeof window?n=window:"undefined"!=typeof global?n=global:"undefined"!=typeof self&&(n=self);var o=n;o=o.Annotator||(o.Annotator={}),o=o.Plugin||(o.Plugin={}),o.Debugstore=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"4hR4NO":[function(_dereq_,module,exports){
(function (global){
var Annotator, self, _ref;

if (typeof self !== "undefined" && self !== null) {
  self = self;
}

if (typeof global !== "undefined" && global !== null) {
  if (self == null) {
    self = global;
  }
}

if (typeof window !== "undefined" && window !== null) {
  if (self == null) {
    self = window;
  }
}

Annotator = self != null ? self.Annotator : void 0;

if (Annotator == null) {
  Annotator = (self != null ? (_ref = self.define) != null ? _ref.amd : void 0 : void 0) ? self != null ? self.require('annotator') : void 0 : void 0;
}

if (typeof Annotator !== 'function') {
  throw new Error("Could not find Annotator! In a webpage context, please ensure that the Annotator script tag is loaded before any plugins.");
}

module.exports = Annotator;


}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"annotator":[function(_dereq_,module,exports){
module.exports=_dereq_('4hR4NO');
},{}],3:[function(_dereq_,module,exports){
var $, Annotator, DebugStore, log, perform, uuid,
  __slice = [].slice;

Annotator = _dereq_('annotator');

$ = Annotator.Util.$;

uuid = (function() {
  var counter;
  counter = -1;
  return function() {
    return counter += 1;
  };
})();

log = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return console.debug.apply(console, ["DebugStore"].concat(__slice.call(args)));
};

perform = function(action, annotation) {
  var dfd;
  log(action, JSON.parse(JSON.stringify(annotation)));
  dfd = $.Deferred();
  dfd.resolve(annotation);
  return dfd.promise();
};

DebugStore = (function() {
  function DebugStore() {}

  DebugStore.prototype.create = function(annotation) {
    annotation.id = uuid();
    return perform('create', annotation);
  };

  DebugStore.prototype.update = function(annotation) {
    return perform('update', annotation);
  };

  DebugStore.prototype["delete"] = function(annotation) {
    return perform('destroy', annotation);
  };

  DebugStore.prototype.query = function(queryObj) {
    var dfd;
    dfd = $.Deferred();
    perform('query', queryObj);
    dfd.resolve([], {
      total: 0
    });
    return dfd.promise();
  };

  DebugStore.prototype.setHeader = function(key, value) {
    return log("would set header '" + key + "'='" + value + "'");
  };

  return DebugStore;

})();

Annotator.Plugin.register('DebugStore', DebugStore);

module.exports = DebugStore;


},{}]},{},[3])

(3)
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGtnL2Fubm90YXRvci5kZWJ1Z3N0b3JlLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwibmFtZXNwYWNlLmNvZmZlZSIsInBsdWdpbi9kZWJ1Z3N0b3JlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUNLQTs7O1NBQU8sSUFBUDs7O0FBQ0E7O1dBQVE7R0FBUjtDQURBOztBQUVBOztXQUFRO0dBQVI7Q0FGQTs7Ozs7RUFNQSxzQkFBYTtDQU5iOztBQVVBO0FBQ0UsUUFBVSxVQUFNLG9CQURsQjtDQVZBOzs7Ozs7Ozs7O0FDTEE7OztZQUFZLFFBQVEsV0FBUixDQUFaOztDQUNBLEdBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQURuQjs7SUFJQSxHQUFPLENBQUM7QUFBRztZQUFVLEVBQVY7U0FBYztXQUFHLFdBQVcsRUFBZDtJQUFqQjtDQUFELEdBSlA7O0dBTUEsR0FBTTtBQUNKO0VBREssOERBQ0w7Z0JBQU8sQ0FBQyxLQUFSLGdCQUFjLGFBQWMsNEJBQTVCLEVBREk7Q0FOTjs7T0FTQSxHQUFVLFNBQUMsTUFBRCxFQUFTLFVBQVQ7QUFDUjtNQUFJLE1BQUosRUFBWSxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxTQUFMLENBQWUsVUFBZixDQUFYLENBQVo7RUFDQSxNQUFNLENBQUMsQ0FBQyxRQUFGLEVBRE47RUFFQSxHQUFHLENBQUMsT0FBSixDQUFZLFVBQVosQ0FGQTtBQUdBLFNBQU8sR0FBRyxDQUFDLE9BQUosRUFBUCxDQUpRO0NBVFY7OzswQkFtQkU7O2dDQUFRLFNBQUMsVUFBRDtBQUNOLGNBQVUsQ0FBQyxFQUFYLEdBQWdCLE1BQWhCO0FBQ0EsV0FBTyxRQUFRLFFBQVIsRUFBa0IsVUFBbEIsQ0FBUCxDQUZNO0dBQVI7O3VCQUlBLFNBQVEsU0FBQyxVQUFEO0FBQ04sV0FBTyxRQUFRLFFBQVIsRUFBa0IsVUFBbEIsQ0FBUCxDQURNO0dBSlI7O3VCQU9BLFlBQVEsU0FBQyxVQUFEO0FBQ04sV0FBTyxRQUFRLFNBQVIsRUFBbUIsVUFBbkIsQ0FBUCxDQURNO0dBUFI7O3VCQVVBLFFBQU8sU0FBQyxRQUFEO0FBQ0w7VUFBTSxDQUFDLENBQUMsUUFBRixFQUFOO0lBQ0EsUUFBUSxPQUFSLEVBQWlCLFFBQWpCLENBREE7SUFFQSxHQUFHLENBQUMsT0FBSixDQUFZLEVBQVosRUFBZ0I7TUFBQyxPQUFPLENBQVI7S0FBaEIsQ0FGQTtBQUdBLFdBQU8sR0FBRyxDQUFDLE9BQUosRUFBUCxDQUpLO0dBVlA7O3VCQWdCQSxZQUFXLFNBQUMsR0FBRCxFQUFNLEtBQU47V0FDVCxJQUFLLHVCQUFtQixHQUFuQixHQUF3QixLQUF4QixHQUE0QixLQUE1QixHQUFtQyxHQUF4QyxFQURTO0dBaEJYOzs7O0lBbkJGOztTQXVDUyxDQUFDLE1BQU0sQ0FBQyxRQUFqQixDQUEwQixZQUExQixFQUF3QyxVQUF4QyxDQXZDQTs7TUF5Q00sQ0FBQyxPQUFQLEdBQWlCLFVBekNqQiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiIyBJbiBvcmRlciB0byBidWlsZCBwb3J0YWJsZSBleHRlbnNpb24gYnVuZGxlcyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggQU1EIGFuZFxuIyBzY3JpcHQgY29uY2F0ZW5hdGlvbiBwbHVnaW5zIGFyZSBidWlsdCB3aXRoIHRoaXMgbW9kdWxlIGFzICdhbm5vdGF0b3InLlxuXG4jIEFubm90YXRvciB3aWxsIGV4cG9ydCBpdHNlbGYgZ2xvYmFsbHkgd2hlbiB0aGUgYnVpbHQgVU1EIG1vZHVsZXMgYXJlIHVzZWQgaW5cbiMgYSBsZWdhY3kgZW52aXJvbm1lbnQgb2Ygc2ltcGxlIHNjcmlwdCBjb25jYXRlbmF0aW9uLlxuc2VsZiA9IHNlbGYgaWYgc2VsZj9cbnNlbGYgPz0gZ2xvYmFsIGlmIGdsb2JhbD9cbnNlbGYgPz0gd2luZG93IGlmIHdpbmRvdz9cbkFubm90YXRvciA9IHNlbGY/LkFubm90YXRvclxuXG4jIEluIGEgcHVyZSBBTUQgZW52aXJvbm1lbnQsIEFubm90YXRvciBtYXkgbm90IGJlIGV4cG9ydGVkIGdsb2JhbGx5LlxuQW5ub3RhdG9yID89IGlmIHNlbGY/LmRlZmluZT8uYW1kIHRoZW4gc2VsZj8ucmVxdWlyZSgnYW5ub3RhdG9yJylcblxuIyBJZiB3ZSBoYXZlbid0IHN1Y2Nlc3NmdWxseSBsb2FkZWQgQW5ub3RhdG9yIGJ5IHRoaXMgcG9pbnQsIHRoZXJlJ3Mgbm8gcG9pbnQgaW5cbiMgZ29pbmcgb24gdG8gbG9hZCB0aGUgcGx1Z2luLCBzbyB0aHJvdyBhIGZhdGFsIGVycm9yLlxuaWYgdHlwZW9mIEFubm90YXRvciBpc250ICdmdW5jdGlvbidcbiAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgQW5ub3RhdG9yISBJbiBhIHdlYnBhZ2UgY29udGV4dCwgcGxlYXNlIGVuc3VyZVxuICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIEFubm90YXRvciBzY3JpcHQgdGFnIGlzIGxvYWRlZCBiZWZvcmUgYW55IHBsdWdpbnMuXCIpXG5cbiMgTm90ZTogd2hlbiB3b3JraW5nIGluIGEgQ29tbW9uSlMgZW52aXJvbm1lbnQgYW5kIGJ1bmRsaW5nIHJlcXVpcmVtZW50cyBpbnRvXG4jIGFwcGxpY2F0aW9ucyB0aGVuIHJlcXVpcmUgY2FsbHMgc2hvdWxkIHJlZmVyIHRvIG1vZHVsZXMgZnJvbSB0aGUgbnBtIGxpYlxuIyBkaXJlY3Rvcnkgb2YgYW5ub3RhdG9yIHBhY2thZ2UgYW5kIGF2b2lkIHRoaXMgYWx0b2dldGhlci5cbm1vZHVsZS5leHBvcnRzID0gQW5ub3RhdG9yXG4iLCJBbm5vdGF0b3IgPSByZXF1aXJlKCdhbm5vdGF0b3InKVxuJCA9IEFubm90YXRvci5VdGlsLiRcblxuXG51dWlkID0gKC0+IGNvdW50ZXIgPSAtMTsgLT4gY291bnRlciArPSAxKSgpXG5cbmxvZyA9IChhcmdzLi4uKSAtPlxuICBjb25zb2xlLmRlYnVnKFwiRGVidWdTdG9yZVwiLCBhcmdzLi4uKVxuXG5wZXJmb3JtID0gKGFjdGlvbiwgYW5ub3RhdGlvbikgLT5cbiAgbG9nKGFjdGlvbiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhbm5vdGF0aW9uKSkpXG4gIGRmZCA9ICQuRGVmZXJyZWQoKVxuICBkZmQucmVzb2x2ZShhbm5vdGF0aW9uKVxuICByZXR1cm4gZGZkLnByb21pc2UoKVxuXG4jIFB1YmxpYzogVGhlIERlYnVnU3RvcmUgcGx1Z2luIGNhbiBiZSB1c2VkIHRvIHByaW50IGRldGFpbHMgb2YgdGhlIGFubm90YXRpb25cbiMgcGVyc2lzdGVuY2UgcHJvY2Vzc2VzIHRvIHRoZSBjb25zb2xlIHdoZW4gZGV2ZWxvcGluZyBvdGhlciBwYXJ0cyBvZiBBbm5vdGF0b3IuXG5jbGFzcyBEZWJ1Z1N0b3JlXG5cbiAgY3JlYXRlOiAoYW5ub3RhdGlvbikgLT5cbiAgICBhbm5vdGF0aW9uLmlkID0gdXVpZCgpXG4gICAgcmV0dXJuIHBlcmZvcm0oJ2NyZWF0ZScsIGFubm90YXRpb24pXG5cbiAgdXBkYXRlOiAoYW5ub3RhdGlvbikgLT5cbiAgICByZXR1cm4gcGVyZm9ybSgndXBkYXRlJywgYW5ub3RhdGlvbilcblxuICBkZWxldGU6IChhbm5vdGF0aW9uKSAtPlxuICAgIHJldHVybiBwZXJmb3JtKCdkZXN0cm95JywgYW5ub3RhdGlvbilcblxuICBxdWVyeTogKHF1ZXJ5T2JqKSAtPlxuICAgIGRmZCA9ICQuRGVmZXJyZWQoKVxuICAgIHBlcmZvcm0oJ3F1ZXJ5JywgcXVlcnlPYmopXG4gICAgZGZkLnJlc29sdmUoW10sIHt0b3RhbDogMH0pXG4gICAgcmV0dXJuIGRmZC5wcm9taXNlKClcblxuICBzZXRIZWFkZXI6IChrZXksIHZhbHVlKSAtPlxuICAgIGxvZyhcIndvdWxkIHNldCBoZWFkZXIgJyN7a2V5fSc9JyN7dmFsdWV9J1wiKVxuXG5cbkFubm90YXRvci5QbHVnaW4ucmVnaXN0ZXIoJ0RlYnVnU3RvcmUnLCBEZWJ1Z1N0b3JlKVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlYnVnU3RvcmVcbiJdfQ==