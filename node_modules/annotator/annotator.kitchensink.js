/*
** Annotator v2.0.0-dev-41928d6
** https://github.com/okfn/annotator/
**
** Copyright 2014, the Annotator project contributors.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-11 02:53:38Z
*/
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var n;"undefined"!=typeof window?n=window:"undefined"!=typeof global?n=global:"undefined"!=typeof self&&(n=self);var o=n;o=o.Annotator||(o.Annotator={}),o=o.Plugin||(o.Plugin={}),o.Kitchensink=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"4hR4NO":[function(_dereq_,module,exports){
(function (global){
var Annotator, self, _ref;

if (typeof self !== "undefined" && self !== null) {
  self = self;
}

if (typeof global !== "undefined" && global !== null) {
  if (self == null) {
    self = global;
  }
}

if (typeof window !== "undefined" && window !== null) {
  if (self == null) {
    self = window;
  }
}

Annotator = self != null ? self.Annotator : void 0;

if (Annotator == null) {
  Annotator = (self != null ? (_ref = self.define) != null ? _ref.amd : void 0 : void 0) ? self != null ? self.require('annotator') : void 0 : void 0;
}

if (typeof Annotator !== 'function') {
  throw new Error("Could not find Annotator! In a webpage context, please ensure that the Annotator script tag is loaded before any plugins.");
}

module.exports = Annotator;


}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"annotator":[function(_dereq_,module,exports){
module.exports=_dereq_('4hR4NO');
},{}],3:[function(_dereq_,module,exports){
var $, Annotator,
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Annotator = _dereq_('annotator');

$ = Annotator.Util.$;

Annotator.prototype.setupPlugins = function(config, options) {
  var name, opts, pluginConfig, plugins, uri, win, _i, _len, _results;
  if (config == null) {
    config = {};
  }
  if (options == null) {
    options = {};
  }
  win = Annotator.Util.getGlobal();
  plugins = ['Unsupported', 'Auth', 'Tags', 'Filter', 'Store', 'AnnotateItPermissions'];
  if (win.Showdown) {
    plugins.push('Markdown');
  }
  uri = win.location.href.split(/#|\?/).shift() || '';
  pluginConfig = {
    Tags: {},
    Filter: {
      filters: [
        {
          label: Annotator._t('User'),
          property: 'user'
        }, {
          label: Annotator._t('Tags'),
          property: 'tags'
        }
      ]
    },
    Auth: {
      tokenUrl: config.tokenUrl || 'http://annotateit.org/api/token'
    },
    Store: {
      prefix: config.storeUrl || 'http://annotateit.org/api',
      annotationData: {
        uri: uri
      },
      loadFromSearch: {
        uri: uri
      }
    }
  };
  for (name in options) {
    if (!__hasProp.call(options, name)) continue;
    opts = options[name];
    if (__indexOf.call(plugins, name) < 0) {
      plugins.push(name);
    }
  }
  $.extend(true, pluginConfig, options);
  _results = [];
  for (_i = 0, _len = plugins.length; _i < _len; _i++) {
    name = plugins[_i];
    if (!(name in pluginConfig) || pluginConfig[name]) {
      _results.push(this.addPlugin(name, pluginConfig[name]));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};


},{}]},{},[3])

(3)
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGtnL2Fubm90YXRvci5raXRjaGVuc2luay5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIm5hbWVzcGFjZS5jb2ZmZWUiLCJwbHVnaW4va2l0Y2hlbnNpbmsuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQ0tBOzs7U0FBTyxJQUFQOzs7QUFDQTs7V0FBUTtHQUFSO0NBREE7O0FBRUE7O1dBQVE7R0FBUjtDQUZBOzs7OztFQU1BLHNCQUFhO0NBTmI7O0FBVUE7QUFDRSxRQUFVLFVBQU0sb0JBRGxCO0NBVkE7Ozs7Ozs7Ozs7QUNMQTs7OztZQUFZLFFBQVEsV0FBUixDQUFaOztDQUNBLEdBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQURuQjs7U0FtQ1MsVUFBRSxhQUFYLEdBQTBCLFNBQUMsTUFBRCxFQUFjLE9BQWQ7QUFDeEI7O0lBRHlCLFNBQVM7R0FDbEM7O0lBRHNDLFVBQVU7R0FDaEQ7UUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQWYsRUFBTjtFQUdBLFVBQVUsQ0FDUixhQURRLEVBRVIsTUFGUSxFQUdSLE1BSFEsRUFJUixRQUpRLEVBS1IsT0FMUSxFQU1SLHVCQU5RLENBSFY7QUFhQSxNQUFHLEdBQUcsQ0FBQyxRQUFQO0FBQ0UsV0FBTyxDQUFDLElBQVIsQ0FBYSxVQUFiLEVBREY7R0FiQTtFQWlCQSxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQWxCLENBQXdCLE1BQXhCLENBQStCLENBQUMsS0FBaEMsTUFBMkMsRUFqQmpEO0VBbUJBLGVBQ0U7VUFBTSxFQUFOO0lBQ0EsUUFDRTtlQUFTO1FBQ1A7VUFBQyxPQUFPLFNBQVMsQ0FBQyxFQUFWLENBQWEsTUFBYixDQUFSO1VBQThCLFVBQVUsTUFBeEM7U0FETyxFQUVQO1VBQUMsT0FBTyxTQUFTLENBQUMsRUFBVixDQUFhLE1BQWIsQ0FBUjtVQUE4QixVQUFVLE1BQXhDO1NBRk87T0FBVDtLQUZGO0lBTUEsTUFDRTtnQkFBVSxNQUFNLENBQUMsUUFBUCxJQUFtQixpQ0FBN0I7S0FQRjtJQVFBLE9BQ0U7Y0FBUSxNQUFNLENBQUMsUUFBUCxJQUFtQiwyQkFBM0I7TUFDQSxnQkFDRTthQUFLLEdBQUw7T0FGRjtNQUdBLGdCQUNFO2FBQUssR0FBTDtPQUpGO0tBVEY7R0FwQkY7QUFtQ0E7OztBQUNFLFFBQUcsZUFBWSxPQUFaLFdBQUg7QUFDRSxhQUFPLENBQUMsSUFBUixDQUFhLElBQWIsRUFERjtLQURGO0dBbkNBO0VBdUNBLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBVCxFQUFlLFlBQWYsRUFBNkIsT0FBN0IsQ0F2Q0E7QUF5Q0E7OztBQUNFLFFBQUcsVUFBWSxZQUFaLEtBQTRCLFlBQWEsTUFBNUM7b0JBQ0UsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFmLEVBQXFCLFlBQWEsTUFBbEMsR0FERjs7O0tBREY7O2tCQTFDd0I7Q0FuQzFCIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIjIEluIG9yZGVyIHRvIGJ1aWxkIHBvcnRhYmxlIGV4dGVuc2lvbiBidW5kbGVzIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBBTUQgYW5kXG4jIHNjcmlwdCBjb25jYXRlbmF0aW9uIHBsdWdpbnMgYXJlIGJ1aWx0IHdpdGggdGhpcyBtb2R1bGUgYXMgJ2Fubm90YXRvcicuXG5cbiMgQW5ub3RhdG9yIHdpbGwgZXhwb3J0IGl0c2VsZiBnbG9iYWxseSB3aGVuIHRoZSBidWlsdCBVTUQgbW9kdWxlcyBhcmUgdXNlZCBpblxuIyBhIGxlZ2FjeSBlbnZpcm9ubWVudCBvZiBzaW1wbGUgc2NyaXB0IGNvbmNhdGVuYXRpb24uXG5zZWxmID0gc2VsZiBpZiBzZWxmP1xuc2VsZiA/PSBnbG9iYWwgaWYgZ2xvYmFsP1xuc2VsZiA/PSB3aW5kb3cgaWYgd2luZG93P1xuQW5ub3RhdG9yID0gc2VsZj8uQW5ub3RhdG9yXG5cbiMgSW4gYSBwdXJlIEFNRCBlbnZpcm9ubWVudCwgQW5ub3RhdG9yIG1heSBub3QgYmUgZXhwb3J0ZWQgZ2xvYmFsbHkuXG5Bbm5vdGF0b3IgPz0gaWYgc2VsZj8uZGVmaW5lPy5hbWQgdGhlbiBzZWxmPy5yZXF1aXJlKCdhbm5vdGF0b3InKVxuXG4jIElmIHdlIGhhdmVuJ3Qgc3VjY2Vzc2Z1bGx5IGxvYWRlZCBBbm5vdGF0b3IgYnkgdGhpcyBwb2ludCwgdGhlcmUncyBubyBwb2ludCBpblxuIyBnb2luZyBvbiB0byBsb2FkIHRoZSBwbHVnaW4sIHNvIHRocm93IGEgZmF0YWwgZXJyb3IuXG5pZiB0eXBlb2YgQW5ub3RhdG9yIGlzbnQgJ2Z1bmN0aW9uJ1xuICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBBbm5vdGF0b3IhIEluIGEgd2VicGFnZSBjb250ZXh0LCBwbGVhc2UgZW5zdXJlXG4gICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgQW5ub3RhdG9yIHNjcmlwdCB0YWcgaXMgbG9hZGVkIGJlZm9yZSBhbnkgcGx1Z2lucy5cIilcblxuIyBOb3RlOiB3aGVuIHdvcmtpbmcgaW4gYSBDb21tb25KUyBlbnZpcm9ubWVudCBhbmQgYnVuZGxpbmcgcmVxdWlyZW1lbnRzIGludG9cbiMgYXBwbGljYXRpb25zIHRoZW4gcmVxdWlyZSBjYWxscyBzaG91bGQgcmVmZXIgdG8gbW9kdWxlcyBmcm9tIHRoZSBucG0gbGliXG4jIGRpcmVjdG9yeSBvZiBhbm5vdGF0b3IgcGFja2FnZSBhbmQgYXZvaWQgdGhpcyBhbHRvZ2V0aGVyLlxubW9kdWxlLmV4cG9ydHMgPSBBbm5vdGF0b3JcbiIsIkFubm90YXRvciA9IHJlcXVpcmUoJ2Fubm90YXRvcicpXG4kID0gQW5ub3RhdG9yLlV0aWwuJFxuXG5cbiMgUHVibGljOiBBIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHRoYXQgc2V0cyB1cCB0aGUgQW5ub3RhdG9yIGFuZCBzb21lIG9mIHRoZVxuIyBkZWZhdWx0IHBsdWdpbnMuIEludGVuZGVkIGZvciB1c2Ugd2l0aCB0aGUgYW5ub3RhdG9yLWZ1bGwgcGFja2FnZS5cbiNcbiMgTk9URTogVGhpcyBtZXRob2QgaXMgaW50ZW5lZCB0byBiZSBjYWxsZWQgdmlhIHRoZSBqUXVlcnkgLmFubm90YXRvcigpIG1ldGhvZFxuIyBhbHRob3VnaCBpdCBpcyBhdmFpbGFibGUgZGlyZWN0bHkgb24gdGhlIEFubm90YXRvciBpbnN0YW5jZS5cbiNcbiMgY29uZmlnICAtIEFuIG9iamVjdCBjb250YWluaW5nIGNvbmZpZyBvcHRpb25zIGZvciB0aGUgQW5ub3RhdGVJdCBzdG9yZS5cbiMgICAgICAgICAgICAgc3RvcmVVcmw6IEFQSSBlbmRwb2ludCBmb3IgdGhlIHN0b3JlIChkZWZhdWx0OlxuIyAgICAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vYW5ub3RhdGVpdC5vcmcvYXBpXCIpXG4jICAgICAgICAgICAgIHRva2VuVXJsOiBBUEkgZW5kcG9pbnQgZm9yIGF1dGggdG9rZW4gcHJvdmlkZXIgKGRlZmF1bHQ6XG4jICAgICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly9hbm5vdGF0ZWl0Lm9yZy9hcGkvdG9rZW5cIilcbiNcbiMgb3B0aW9ucyAtIEFuIG9iamVjdCBjb250YWluaW5nIHBsdWdpbiBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4jICAgICAgICAgICBJZiBhIHBsdWdpbiBpcyBlbnRlcmVkIHdpdGggYSAnZmFsc3knIHZhbHVlLCB0aGUgcGx1Z2luIHdpbGwgbm90IGJlXG4jICAgICAgICAgICBsb2FkZWQuXG4jXG4jIEV4YW1wbGVzXG4jXG4jICAgJCgnI2NvbnRlbnQnKS5hbm5vdGF0b3IoKS5hbm5vdGF0b3IoJ3NldHVwUGx1Z2lucycpO1xuI1xuIyAgIC8vIE9ubHkgZGlzcGxheSBhIGZpbHRlciBmb3IgdGhlIHVzZXIgZmllbGQgYW5kIGRpc2FibGUgdGFncy5cbiMgICAkKCcjY29udGVudCcpLmFubm90YXRvcigpLmFubm90YXRvcignc2V0dXBQbHVnaW5zJywgbnVsbCwge1xuIyAgICAgVGFnczogZmFsc2UsXG4jICAgICBGaWx0ZXI6IHtcbiMgICAgICAgZmlsdGVyczogW3tsYWJlbDogJ1VzZXInLCBwcm9wZXJ0eTogJ3VzZXInfV0sXG4jICAgICAgIGFkZEFubm90YXRpb25GaWx0ZXI6IGZhbHNlXG4jICAgICB9XG4jICAgfSk7XG4jXG4jIFJldHVybnMgaXRzZWxmIGZvciBjaGFpbmluZy5cbiMgY29mZmVlbGludDogZGlzYWJsZT1taXNzaW5nX2ZhdF9hcnJvd3NcbkFubm90YXRvcjo6c2V0dXBQbHVnaW5zID0gKGNvbmZpZyA9IHt9LCBvcHRpb25zID0ge30pIC0+XG4gIHdpbiA9IEFubm90YXRvci5VdGlsLmdldEdsb2JhbCgpXG5cbiAgIyBTZXQgdXAgdGhlIGRlZmF1bHQgcGx1Z2lucy5cbiAgcGx1Z2lucyA9IFtcbiAgICAnVW5zdXBwb3J0ZWQnLFxuICAgICdBdXRoJyxcbiAgICAnVGFncycsXG4gICAgJ0ZpbHRlcicsXG4gICAgJ1N0b3JlJyxcbiAgICAnQW5ub3RhdGVJdFBlcm1pc3Npb25zJ1xuICBdXG5cbiAgIyBJZiBTaG93ZG93biBpcyBpbmNsdWRlZCBhZGQgdGhlIE1hcmtkb3duIHBsdWdpbi5cbiAgaWYgd2luLlNob3dkb3duXG4gICAgcGx1Z2lucy5wdXNoKCdNYXJrZG93bicpXG5cbiAgIyBDaGVjayB0aGUgY29uZmlnIGZvciBzdG9yZSBjcmVkZW50aWFscyBhbmQgYWRkIHJlbGV2YW50IHBsdWdpbnMuXG4gIHVyaSA9IHdpbi5sb2NhdGlvbi5ocmVmLnNwbGl0KC8jfFxcPy8pLnNoaWZ0KCkgb3IgJydcblxuICBwbHVnaW5Db25maWcgPVxuICAgIFRhZ3M6IHt9XG4gICAgRmlsdGVyOlxuICAgICAgZmlsdGVyczogW1xuICAgICAgICB7bGFiZWw6IEFubm90YXRvci5fdCgnVXNlcicpLCBwcm9wZXJ0eTogJ3VzZXInfVxuICAgICAgICB7bGFiZWw6IEFubm90YXRvci5fdCgnVGFncycpLCBwcm9wZXJ0eTogJ3RhZ3MnfVxuICAgICAgXVxuICAgIEF1dGg6XG4gICAgICB0b2tlblVybDogY29uZmlnLnRva2VuVXJsIG9yICdodHRwOi8vYW5ub3RhdGVpdC5vcmcvYXBpL3Rva2VuJ1xuICAgIFN0b3JlOlxuICAgICAgcHJlZml4OiBjb25maWcuc3RvcmVVcmwgb3IgJ2h0dHA6Ly9hbm5vdGF0ZWl0Lm9yZy9hcGknXG4gICAgICBhbm5vdGF0aW9uRGF0YTpcbiAgICAgICAgdXJpOiB1cmlcbiAgICAgIGxvYWRGcm9tU2VhcmNoOlxuICAgICAgICB1cmk6IHVyaVxuXG4gIGZvciBvd24gbmFtZSwgb3B0cyBvZiBvcHRpb25zXG4gICAgaWYgbmFtZSBub3QgaW4gcGx1Z2luc1xuICAgICAgcGx1Z2lucy5wdXNoKG5hbWUpXG5cbiAgJC5leHRlbmQgdHJ1ZSwgcGx1Z2luQ29uZmlnLCBvcHRpb25zXG5cbiAgZm9yIG5hbWUgaW4gcGx1Z2luc1xuICAgIGlmIG5hbWUgbm90IG9mIHBsdWdpbkNvbmZpZyBvciBwbHVnaW5Db25maWdbbmFtZV1cbiAgICAgIHRoaXMuYWRkUGx1Z2luKG5hbWUsIHBsdWdpbkNvbmZpZ1tuYW1lXSlcbiAgIyBjb2ZmZWVsaW50OiBlbmFibGU9bWlzc2luZ19mYXRfYXJyb3dzXG4iXX0=