{"version":3,"file":"annotator.tags.min.js","sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","namespace.coffee","plugin/tags.coffee"],"names":[],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# In order to build portable extension bundles that can be used with AMD and\n# script concatenation plugins are built with this module as 'annotator'.\n\n# Annotator will export itself globally when the built UMD modules are used in\n# a legacy environment of simple script concatenation.\nself = self if self?\nself ?= global if global?\nself ?= window if window?\nAnnotator = self?.Annotator\n\n# In a pure AMD environment, Annotator may not be exported globally.\nAnnotator ?= if self?.define?.amd then self?.require('annotator')\n\n# If we haven't successfully loaded Annotator by this point, there's no point in\n# going on to load the plugin, so throw a fatal error.\nif typeof Annotator isnt 'function'\n  throw new Error(\"Could not find Annotator! In a webpage context, please ensure\n                   that the Annotator script tag is loaded before any plugins.\")\n\n# Note: when working in a CommonJS environment and bundling requirements into\n# applications then require calls should refer to modules from the npm lib\n# directory of annotator package and avoid this altogether.\nmodule.exports = Annotator\n","Annotator = require('annotator')\n$ = Annotator.Util.$\n\n\n# Public: Tags plugin allows users to tag thier annotations with metadata\n# stored in an Array on the annotation as tags.\nclass Tags extends Annotator.Plugin\n\n  options:\n    # Configurable function which accepts a string (the contents)\n    # of the tags input as an argument, and returns an array of\n    # tags.\n    parseTags: (string) ->\n      string = $.trim(string)\n\n      tags = []\n      tags = string.split(/\\s+/) if string\n      tags\n\n    # Configurable function which accepts an array of tags and\n    # returns a string which will be used to fill the tags input.\n    stringifyTags: (array) ->\n      array.join(\" \")\n\n  # The field element added to the Annotator.Editor wrapped in jQuery. Cached to\n  # save having to recreate it everytime the editor is displayed.\n  field: null\n\n  # The input element added to the Annotator.Editor wrapped in jQuery. Cached to\n  # save having to recreate it everytime the editor is displayed.\n  input: null\n\n  # Public: Initialises the plugin and adds custom fields to both the\n  # annotator viewer and editor. The plugin also checks if the annotator is\n  # supported by the current browser.\n  #\n  # Returns nothing.\n  pluginInit: ->\n    return unless Annotator.supported()\n\n    @field = @annotator.editor.addField({\n      label: Annotator._t('Add some tags here') + '\\u2026'\n      load: this.updateField\n      submit: this.setAnnotationTags\n    })\n\n    @annotator.viewer.addField({\n      load: this.updateViewer\n    })\n\n    # Add a filter to the Filter plugin if loaded.\n    if @annotator.plugins.Filter\n      @annotator.plugins.Filter.addFilter\n        label: Annotator._t('Tag')\n        property: 'tags'\n        isFiltered: Tags.filterCallback\n\n    @input = $(@field).find(':input')\n\n  # Public: Extracts tags from the provided String.\n  #\n  # string - A String of tags seperated by spaces.\n  #\n  # Examples\n  #\n  #   plugin.parseTags('cake chocolate cabbage')\n  #   # => ['cake', 'chocolate', 'cabbage']\n  #\n  # Returns Array of parsed tags.\n  parseTags: (string) ->\n    @options.parseTags(string)\n\n  # Public: Takes an array of tags and serialises them into a String.\n  #\n  # array - An Array of tags.\n  #\n  # Examples\n  #\n  #   plugin.stringifyTags(['cake', 'chocolate', 'cabbage'])\n  #   # => 'cake chocolate cabbage'\n  #\n  # Returns Array of parsed tags.\n  stringifyTags: (array) ->\n    @options.stringifyTags(array)\n\n  # Annotator.Editor callback function. Updates the @input field with the\n  # tags attached to the provided annotation.\n  #\n  # field      - The tags field Element containing the input Element.\n  # annotation - An annotation object to be edited.\n  #\n  # Examples\n  #\n  #   field = $('<li><input /></li>')[0]\n  #   plugin.updateField(field, {tags: ['apples', 'oranges', 'cake']})\n  #   field.value # => Returns 'apples oranges cake'\n  #\n  # Returns nothing.\n  updateField: (field, annotation) =>\n    value = ''\n    value = this.stringifyTags(annotation.tags) if annotation.tags\n\n    @input.val(value)\n\n  # Annotator.Editor callback function. Updates the annotation field with the\n  # data retrieved from the @input property.\n  #\n  # field      - The tags field Element containing the input Element.\n  # annotation - An annotation object to be updated.\n  #\n  # Examples\n  #\n  #   annotation = {}\n  #   field = $('<li><input value=\"cake chocolate cabbage\" /></li>')[0]\n  #\n  #   plugin.setAnnotationTags(field, annotation)\n  #   annotation.tags # => Returns ['cake', 'chocolate', 'cabbage']\n  #\n  # Returns nothing.\n  setAnnotationTags: (field, annotation) =>\n    annotation.tags = this.parseTags(@input.val())\n\n  # Annotator.Viewer callback function. Updates the annotation display with tags\n  # removes the field from the Viewer if there are no tags to display.\n  #\n  # field      - The Element to populate with tags.\n  # annotation - An annotation object to be display.\n  #\n  # Examples\n  #\n  #   field = $('<div />')[0]\n  #   plugin.updateField(field, {tags: ['apples']})\n  #   field.innerHTML # => Returns '<span class=\"annotator-tag\">apples</span>'\n  #\n  # Returns nothing.\n  updateViewer: (field, annotation) ->\n    field = $(field)\n\n    if annotation.tags and $.isArray(annotation.tags) and annotation.tags.length\n      field.addClass('annotator-tags').html(->\n        string = $.map(annotation.tags,(tag) ->\n          '<span class=\"annotator-tag\">' +\n          Annotator.Util.escape(tag) +\n          '</span>'\n        ).join(' ')\n      )\n    else\n      field.remove()\n\n# Checks an input string of keywords against an array of tags. If the keywords\n# match _all_ tags the function returns true. This should be used as a callback\n# in the Filter plugin.\n#\n# input - A String of keywords from a input field.\n#\n# Examples\n#\n#   Tags.filterCallback('cat dog mouse', ['cat', 'dog', 'mouse']) //=> true\n#   Tags.filterCallback('cat dog', ['cat', 'dog', 'mouse']) //=> true\n#   Tags.filterCallback('cat dog', ['cat']) //=> false\n#\n# Returns true if the input keywords match all tags.\nTags.filterCallback = (input, tags = []) ->\n  matches  = 0\n  keywords = []\n  if input\n    keywords = input.split(/\\s+/g)\n    for keyword in keywords when tags.length\n      matches += 1 for tag in tags when tag.indexOf(keyword) != -1\n\n  matches == keywords.length\n\nAnnotator.Plugin.register('Tags', Tags)\n\nmodule.exports = Tags\n"]}