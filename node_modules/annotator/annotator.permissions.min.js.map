{"version":3,"file":"annotator.permissions.min.js","sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","namespace.coffee","plugin/permissions.coffee"],"names":[],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# In order to build portable extension bundles that can be used with AMD and\n# script concatenation plugins are built with this module as 'annotator'.\n\n# Annotator will export itself globally when the built UMD modules are used in\n# a legacy environment of simple script concatenation.\nself = self if self?\nself ?= global if global?\nself ?= window if window?\nAnnotator = self?.Annotator\n\n# In a pure AMD environment, Annotator may not be exported globally.\nAnnotator ?= if self?.define?.amd then self?.require('annotator')\n\n# If we haven't successfully loaded Annotator by this point, there's no point in\n# going on to load the plugin, so throw a fatal error.\nif typeof Annotator isnt 'function'\n  throw new Error(\"Could not find Annotator! In a webpage context, please ensure\n                   that the Annotator script tag is loaded before any plugins.\")\n\n# Note: when working in a CommonJS environment and bundling requirements into\n# applications then require calls should refer to modules from the npm lib\n# directory of annotator package and avoid this altogether.\nmodule.exports = Annotator\n","Annotator = require('annotator')\n$ = Annotator.Util.$\n_t = Annotator.Util.TranslationString\n\n\n# Public: Plugin for setting permissions on newly created annotations as well as\n# managing user permissions such as viewing/editing/deleting annotions.\n#\n# element - A DOM Element upon which events are bound. When initialised by\n#           the Annotator it is the Annotator element.\n# options - An Object literal containing custom options.\n#\n# Examples\n#\n#   new Annotator.plugin.Permissions(annotator.element, {\n#     user: 'Alice'\n#   })\n#\n# Returns a new instance of the Permissions Object.\nclass Permissions extends Annotator.Plugin\n\n  # coffeelint: disable=missing_fat_arrows\n\n  # A Object literal of default options for the class.\n  options:\n\n    # Displays an \"Anyone can view this annotation\" checkbox in the Editor.\n    showViewPermissionsCheckbox: true\n\n    # Displays an \"Anyone can edit this annotation\" checkbox in the Editor.\n    showEditPermissionsCheckbox: true\n\n    # Public: Used by the plugin to determine a unique id for the @user\n    # property. By default this accepts and returns the user String but can be\n    # overridden in the @options object passed into the constructor.\n    #\n    # user - A String username or null if no user is set.\n    #\n    # Returns the String provided as user object.\n    userId: (user) -> user\n\n    # Public: Used by the plugin to determine a display name for the @user\n    # property. By default this accepts and returns the user String but can be\n    # over-ridden in the @options object passed into the constructor.\n    #\n    # user - A String username or null if no user is set.\n    #\n    # Returns the String provided as user object\n    userString: (user) -> user\n\n    # Public: Used by Permissions#authorize to determine whether a user can\n    # perform an action on an annotation. Overriding this function allows\n    # a far more complex permissions sysyem.\n    #\n    # By default this authorizes the action if any of three scenarios are true:\n    #\n    #     1) the annotation has a 'permissions' object, and either the field for\n    #        the specified action is missing, empty, or contains the userId of\n    #        the current user, i.e. @options.userId(@user)\n    #\n    #     2) the annotation has a 'user' property, and @options.userId(@user)\n    #        matches 'annotation.user'\n    #\n    #     3) the annotation has no 'permissions' or 'user' properties\n    #\n    # annotation - The annotation on which the action is being requested.\n    # action - The action being requested: e.g. 'update', 'delete'.\n    # user - The user object (or string) requesting the action. This is usually\n    #        automatically passed by Permissions#authorize as the current user\n    #        (@user)\n    #\n    #   permissions.setUser(null)\n    #   permissions.authorize('update', {})\n    #   # => true\n    #\n    #   permissions.setUser('alice')\n    #   permissions.authorize('update', {user: 'alice'})\n    #   # => true\n    #   permissions.authorize('update', {user: 'bob'})\n    #   # => false\n    #\n    #   permissions.setUser('alice')\n    #   permissions.authorize('update', {\n    #     user: 'bob',\n    #     permissions: ['update': ['alice', 'bob']]\n    #   })\n    #   # => true\n    #   permissions.authorize('destroy', {\n    #     user: 'bob',\n    #     permissions: [\n    #       'update': ['alice', 'bob']\n    #       'destroy': ['bob']\n    #     ]\n    #   })\n    #   # => false\n    #\n    # Returns a Boolean, true if the user is authorised for the token provided.\n    userAuthorize: (action, annotation, user) ->\n      # Fine-grained custom authorization\n      if annotation.permissions\n        tokens = annotation.permissions[action] || []\n\n        if tokens.length == 0\n          # Empty or missing tokens array: anyone can perform action.\n          return true\n\n        for token in tokens\n          if this.userId(user) == token\n            return true\n\n        # No tokens matched: action should not be performed.\n        return false\n\n      # Coarse-grained authorization\n      else if annotation.user\n        if user\n          return this.userId(user) == this.userId(annotation.user)\n        else\n          return false\n\n      # No authorization info on annotation: free-for-all!\n      true\n\n    # Default user object.\n    user: ''\n\n    # Default permissions for all annotations. Anyone can do anything\n    # (assuming default userAuthorize function).\n    permissions:\n      read: []\n      update: []\n      delete: []\n      admin: []\n\n  # coffeelint: enable=missing_fat_arrows\n\n  # The constructor called when a new instance of the Permissions\n  # plugin is created. See class documentation for usage.\n  #\n  # element - A DOM Element upon which events are bound..\n  # options - An Object literal containing custom options.\n  #\n  # Returns an instance of the Permissions object.\n  constructor: (element, options) ->\n    super\n\n    if @options.user\n      this.setUser(@options.user)\n      delete @options.user\n\n  # Public: Initializes the plugin and registers fields with the\n  # Annotator.Editor and Annotator.Viewer.\n  #\n  # Returns nothing.\n  pluginInit: ->\n    return unless Annotator.supported()\n\n    @annotator.subscribe('beforeAnnotationCreated', this.addFieldsToAnnotation)\n\n    self = this\n    createCallback = (method, type) ->\n      (field, annotation) -> self[method].call(self, type, field, annotation)\n\n    # Set up user and default permissions from auth token if none currently\n    # given\n    if !@user and @annotator.plugins.Auth\n      @annotator.plugins.Auth.withToken(this._setAuthFromToken)\n\n    if @options.showViewPermissionsCheckbox == true\n      @annotator.editor.addField({\n        type: 'checkbox'\n        label: _t('Allow anyone to <strong>view</strong> this annotation')\n        load: createCallback('updatePermissionsField', 'read')\n        submit: createCallback('updateAnnotationPermissions', 'read')\n      })\n\n    if @options.showEditPermissionsCheckbox == true\n      @annotator.editor.addField({\n        type: 'checkbox'\n        label: _t('Allow anyone to <strong>edit</strong> this annotation')\n        load: createCallback('updatePermissionsField', 'update')\n        submit: createCallback('updateAnnotationPermissions', 'update')\n      })\n\n    # Setup the display of annotations in the Viewer.\n    @annotator.viewer.addField({\n      load: this.updateViewer\n    })\n\n    # Add a filter to the Filter plugin if loaded.\n    if @annotator.plugins.Filter\n      @annotator.plugins.Filter.addFilter({\n        label: _t('User')\n        property: 'user'\n        isFiltered: (input, user) =>\n          user = @options.userString(user)\n\n          return false unless input and user\n          for keyword in (input.split /\\s*/)\n            return false if user.indexOf(keyword) == -1\n\n          return true\n      })\n\n  # Public: Sets the Permissions#user property.\n  #\n  # user - A String or Object to represent the current user.\n  #\n  # Examples\n  #\n  #   permissions.setUser('Alice')\n  #\n  #   permissions.setUser({id: 35, name: 'Alice'})\n  #\n  # Returns nothing.\n  setUser: (user) ->\n    @user = user\n\n  # Event callback: Appends the @user and @options.permissions objects to the\n  # provided annotation object. Only appends the user if one has been set.\n  #\n  # annotation - An annotation object.\n  #\n  # Examples\n  #\n  #   annotation = {text: 'My comment'}\n  #   permissions.addFieldsToAnnotation(annotation)\n  #   console.log(annotation)\n  #   # => {text: 'My comment', permissions: {...}}\n  #\n  # Returns nothing.\n  addFieldsToAnnotation: (annotation) =>\n    if annotation\n      annotation.permissions = @options.permissions\n      if @user\n        annotation.user = @user\n\n  # Public: Determines whether the provided action can be performed on the\n  # annotation. This uses the user-configurable 'userAuthorize' method to\n  # determine if an annotation is annotatable. See the default method for\n  # documentation on its behaviour.\n  #\n  # Returns a Boolean, true if the action can be performed on the annotation.\n  authorize: (action, annotation, user) ->\n    user = @user if user == undefined\n\n    if @options.userAuthorize\n      return @options.userAuthorize.call(@options, action, annotation, user)\n\n    else # userAuthorize nulled out: free-for-all!\n      return true\n\n  # Field callback: Updates the state of the \"anyone can…\" checkboxes\n  #\n  # action     - The action String, either \"view\" or \"update\"\n  # field      - A DOM Element containing a form input.\n  # annotation - An annotation Object.\n  #\n  # Returns nothing.\n  updatePermissionsField: (action, field, annotation) =>\n    field = $(field).show()\n    input = field.find('input').removeAttr('disabled')\n\n    # Do not show field if current user is not admin.\n    field.hide() unless this.authorize('admin', annotation)\n\n    # See if we can authorise without a user.\n    if this.authorize(action, annotation || {}, null)\n      input.attr('checked', 'checked')\n    else\n      input.removeAttr('checked')\n\n\n  # Field callback: updates the annotation.permissions object based on the state\n  # of the field checkbox. If it is checked then permissions are set to world\n  # writable otherwise they use the original settings.\n  #\n  # action     - The action String, either \"view\" or \"update\"\n  # field      - A DOM Element representing the annotation editor.\n  # annotation - An annotation Object.\n  #\n  # Returns nothing.\n  updateAnnotationPermissions: (type, field, annotation) =>\n    annotation.permissions = @options.permissions unless annotation.permissions\n\n    dataKey = type + '-permissions'\n\n    if $(field).find('input').is(':checked')\n      annotation.permissions[type] = []\n    else\n      # Clearly, the permissions model allows for more complex entries than\n      # this, but our UI presents a checkbox, so we can only interpret \"prevent\n      # others from viewing\" as meaning \"allow only me to view\". This may want\n      # changing in the future.\n      annotation.permissions[type] = [@options.userId(@user)]\n\n  # Field callback: updates the annotation viewer to inlude the display name\n  # for the user obtained through Permissions#options.userString().\n  #\n  # field      - A DIV Element representing the annotation field.\n  # annotation - An annotation Object to display.\n  # controls   - A control Object to toggle the display of annotation controls.\n  #\n  # Returns nothing.\n  updateViewer: (field, annotation, controls) =>\n    field = $(field)\n\n    username = @options.userString annotation.user\n    if annotation.user and username and typeof username == 'string'\n      user = Annotator.Util.escape(@options.userString(annotation.user))\n      field.html(user).addClass('annotator-user')\n    else\n      field.remove()\n\n    if controls\n      controls.hideEdit()   unless this.authorize('update', annotation)\n      controls.hideDelete() unless this.authorize('delete', annotation)\n\n  # Sets the Permissions#user property on the basis of a received authToken.\n  #\n  # token - the authToken received by the Auth plugin\n  #\n  # Returns nothing.\n  _setAuthFromToken: (token) =>\n    this.setUser(token.userId)\n\n\nAnnotator.Plugin.register('Permissions', Permissions)\n\nmodule.exports = Permissions\n"]}