{"version":3,"file":"annotator.filter.min.js","sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","namespace.coffee","plugin/filter.coffee"],"names":[],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# In order to build portable extension bundles that can be used with AMD and\n# script concatenation plugins are built with this module as 'annotator'.\n\n# Annotator will export itself globally when the built UMD modules are used in\n# a legacy environment of simple script concatenation.\nself = self if self?\nself ?= global if global?\nself ?= window if window?\nAnnotator = self?.Annotator\n\n# In a pure AMD environment, Annotator may not be exported globally.\nAnnotator ?= if self?.define?.amd then self?.require('annotator')\n\n# If we haven't successfully loaded Annotator by this point, there's no point in\n# going on to load the plugin, so throw a fatal error.\nif typeof Annotator isnt 'function'\n  throw new Error(\"Could not find Annotator! In a webpage context, please ensure\n                   that the Annotator script tag is loaded before any plugins.\")\n\n# Note: when working in a CommonJS environment and bundling requirements into\n# applications then require calls should refer to modules from the npm lib\n# directory of annotator package and avoid this altogether.\nmodule.exports = Annotator\n","Annotator = require('annotator')\n$ = Annotator.Util.$\n_t = Annotator._t\n\nclass Filter extends Annotator.Plugin\n  # Events and callbacks to bind to the Filter#element.\n  events:\n    \".annotator-filter-property input focus\": \"_onFilterFocus\"\n    \".annotator-filter-property input blur\": \"_onFilterBlur\"\n    \".annotator-filter-property input keyup\": \"_onFilterKeyup\"\n    \".annotator-filter-previous click\": \"_onPreviousClick\"\n    \".annotator-filter-next click\": \"_onNextClick\"\n    \".annotator-filter-clear click\": \"_onClearClick\"\n\n  # Common classes used to change plugin state.\n  classes:\n    active: 'annotator-filter-active'\n    hl:\n      hide: 'annotator-hl-filtered'\n      active: 'annotator-hl-active'\n\n  # HTML templates for the plugin UI.\n  html:\n    element: \"\"\"\n      <div class=\"annotator-filter\">\n        <strong>#{_t('Navigate:')}</strong>\n        <span class=\"annotator-filter-navigation\">\n          <button type=\"button\"\n                  class=\"annotator-filter-previous\">#{_t('Previous')}</button>\n          <button type=\"button\"\n                  class=\"annotator-filter-next\">#{_t('Next')}</button>\n        </span>\n        <strong>#{_t('Filter by:')}</strong>\n      </div>\n      \"\"\"\n    filter: \"\"\"\n      <span class=\"annotator-filter-property\">\n        <label></label>\n        <input/>\n        <button type=\"button\"\n                class=\"annotator-filter-clear\">#{_t('Clear')}</button>\n      </span>\n      \"\"\"\n\n  # Default options for the plugin.\n  options:\n    # A CSS selector or Element to append the plugin toolbar to.\n    appendTo: 'body'\n\n    # An array of filters can be provided on initialisation.\n    filters: []\n\n    # Adds a default filter on annotations.\n    addAnnotationFilter: true\n\n    # Public: Determines if the property is contained within the provided\n    # annotation property. Default is to split the string on spaces and only\n    # return true if all keywords are contained in the string. This method\n    # can be overridden by the user when initialising the plugin.\n    #\n    # string   - An input String from the fitler.\n    # property - The annotation propery to query.\n    #\n    # Examples\n    #\n    #   plugin.option.getKeywords('hello', 'hello world how are you?')\n    #   # => Returns true\n    #\n    #   plugin.option.getKeywords('hello bill', 'hello world how are you?')\n    #   # => Returns false\n    #\n    # Returns an Array of keyword Strings.\n    isFiltered: (input, property) ->\n      return false unless input and property\n\n      for keyword in (input.split /\\s+/)\n        return false if property.indexOf(keyword) == -1\n\n      return true\n\n  # Public: Creates a new instance of the Filter plugin.\n  #\n  # element - The Annotator element (this is ignored by the plugin).\n  # options - An Object literal of options.\n  #\n  # Examples\n  #\n  #   filter = new Filter(annotator.element)\n  #\n  # Returns a new instance of the Filter plugin.\n  constructor: (element, options) ->\n    # As most events for this plugin are relative to the toolbar which is\n    # not inside the Annotator#Element we override the element property.\n    # Annotator#Element can still be accessed via @annotator.element.\n    element = $(@html.element).appendTo(options?.appendTo or @options.appendTo)\n\n    super element, options\n\n    @options.filters or= []\n\n    @filter  = $(@html.filter)\n    @filters = []\n    @current  = 0\n\n  # Public: Adds new filters. Updates the @highlights cache and creates event\n  # listeners on the annotator object.\n  #\n  # Returns nothing.\n  pluginInit: ->\n    for filter in @options.filters\n      this.addFilter(filter)\n\n    this.updateHighlights()\n    this._setupListeners()._insertSpacer()\n\n    if @options.addAnnotationFilter == true\n      this.addFilter {label: Annotator._t('Annotation'), property: 'text'}\n\n  # Public: remove the filter plugin instance and unbind events.\n  #\n  # Returns nothing.\n  destroy: ->\n    super\n    html = $('html')\n    currentMargin = parseInt(html.css('padding-top'), 10) || 0\n    html.css('padding-top', currentMargin - @element.outerHeight())\n    @element.remove()\n\n  # Adds margin to the current document to ensure that the annotation toolbar\n  # doesn't cover the page when not scrolled.\n  #\n  # Returns itself\n  _insertSpacer: ->\n    html = $('html')\n    currentMargin = parseInt(html.css('padding-top'), 10) || 0\n    html.css('padding-top', currentMargin + @element.outerHeight())\n    this\n\n  # Listens to annotation change events on the Annotator in order to refresh\n  # the @annotations collection.\n  # TODO: Make this more granular so the entire collection isn't reloaded for\n  # every single change.\n  #\n  # Returns itself.\n  _setupListeners: ->\n    events = [\n      'annotationsLoaded', 'annotationCreated',\n      'annotationUpdated', 'annotationDeleted'\n    ]\n\n    for event in events\n      @annotator.subscribe event, this.updateHighlights\n    this\n\n  # Public: Adds a filter to the toolbar. The filter must have both a label\n  # and a property of an annotation object to filter on.\n  #\n  # options - An Object literal containing the filters options.\n  #           label      - A public facing String to represent the filter.\n  #           property   - An annotation property String to filter on.\n  #           isFiltered - A callback Function that recieves the field input\n  #                        value and the annotation property value. See\n  #                        @options.isFiltered() for details.\n  #\n  # Examples\n  #\n  #   # Set up a filter to filter on the annotation.user property.\n  #   filter.addFilter({\n  #     label: User,\n  #     property: 'user'\n  #   })\n  #\n  # Returns itself to allow chaining.\n  addFilter: (options) ->\n    filter = $.extend({\n      label: ''\n      property: ''\n      isFiltered: @options.isFiltered\n    }, options)\n\n    # Skip if a filter for this property has been loaded.\n    unless (f for f in @filters when f.property == filter.property).length\n      filter.id = 'annotator-filter-' + filter.property\n      filter.annotations = []\n      filter.element = @filter.clone().appendTo(@element)\n      filter.element.find('label')\n        .html(filter.label)\n        .attr('for', filter.id)\n      filter.element.find('input')\n        .attr({\n          id: filter.id\n          placeholder: Annotator._t('Filter by ') + filter.label + '\\u2026'\n        })\n      filter.element.find('button').hide()\n\n      # Add the filter to the elements data store.\n      filter.element.data 'filter', filter\n\n      @filters.push filter\n\n    this\n\n  # Public: Updates the filter.annotations property. Then updates the state\n  # of the elements in the DOM. Calls the filter.isFiltered() method to\n  # determine if the annotation should remain.\n  #\n  # filter - A filter Object from @filters\n  #\n  # Examples\n  #\n  #   filter.updateFilter(myFilter)\n  #\n  # Returns itself for chaining\n  updateFilter: (filter) ->\n    filter.annotations = []\n\n    this.updateHighlights()\n    this.resetHighlights()\n    input = $.trim filter.element.find('input').val()\n\n    if input\n      # coffeelint: disable=missing_fat_arrows\n      annotations = @highlights.map -> $(this).data('annotation')\n      # coffeelint: enable=missing_fat_arrows\n\n      for annotation in $.makeArray(annotations)\n        property = annotation[filter.property]\n        if filter.isFiltered input, property\n          filter.annotations.push annotation\n\n      this.filterHighlights()\n\n  # Public: Updates the @highlights property with the latest highlight\n  # elements in the DOM.\n  #\n  # Returns a jQuery collection of the highlight elements.\n  updateHighlights: =>\n    # Ignore any hidden highlights.\n    @highlights = @annotator.element.find('.annotator-hl:visible')\n    @filtered   = @highlights.not(@classes.hl.hide)\n\n  # Public: Runs through each of the filters and removes all highlights not\n  # currently in scope.\n  #\n  # Returns itself for chaining.\n  filterHighlights: ->\n    activeFilters = $.grep @filters, (filter) -> !!filter.annotations.length\n\n    filtered = activeFilters[0]?.annotations || []\n    if activeFilters.length > 1\n      # If there are more than one filter then only annotations matched in every\n      # filter should remain.\n      annotations = []\n\n      # coffeelint: disable=missing_fat_arrows\n\n      $.each activeFilters, ->\n        $.merge(annotations, this.annotations)\n\n      uniques  = []\n      filtered = []\n      $.each annotations, ->\n        if $.inArray(this, uniques) == -1\n          uniques.push this\n        else\n          filtered.push this\n\n      # coffeelint: enable=missing_fat_arrows\n\n    highlights = @highlights\n    for annotation, index in filtered\n      highlights = highlights.not(annotation.highlights)\n\n    highlights.addClass(@classes.hl.hide)\n\n    @filtered = @highlights.not(@classes.hl.hide)\n    this\n\n  # Public: Removes hidden class from all annotations.\n  #\n  # Returns itself for chaining.\n  resetHighlights: ->\n    @highlights.removeClass(@classes.hl.hide)\n    @filtered = @highlights\n    this\n\n  # Updates the filter field on focus.\n  #\n  # event - A focus Event object.\n  #\n  # Returns nothing\n  _onFilterFocus: (event) =>\n    input = $(event.target)\n    input.parent().addClass(@classes.active)\n    input.next('button').show()\n\n  # Updates the filter field on blur.\n  #\n  # event - A blur Event object.\n  #\n  # Returns nothing.\n  _onFilterBlur: (event) =>\n    unless event.target.value\n      input = $(event.target)\n      input.parent().removeClass(@classes.active)\n      input.next('button').hide()\n\n  # Updates the filter based on the id of the filter element.\n  #\n  # event - A keyup Event\n  #\n  # Returns nothing.\n  _onFilterKeyup: (event) =>\n    filter = $(event.target).parent().data('filter')\n    this.updateFilter filter if filter\n\n  # Locates the next/previous highlighted element in @highlights from the\n  # current one or goes to the very first/last element respectively.\n  #\n  # previous - If true finds the previously highlighted element.\n  #\n  # Returns itself.\n  _findNextHighlight: (previous) ->\n    return this unless @highlights.length\n\n    offset      = if previous then 0    else -1\n    resetOffset = if previous then -1   else 0\n    operator    = if previous then 'lt' else 'gt'\n\n    active  = @highlights.not('.' + @classes.hl.hide)\n    current = active.filter('.' + @classes.hl.active)\n    current = active.eq(offset) unless current.length\n\n    annotation = current.data 'annotation'\n\n    index = active.index current[0]\n    next  = active.filter(\":#{operator}(#{index})\")\n                  .not(annotation.highlights)\n                  .eq(resetOffset)\n    next  = active.eq(resetOffset) unless next.length\n\n    this._scrollToHighlight next.data('annotation').highlights\n\n  # Locates the next highlighted element in @highlights from the current one\n  # or goes to the very first element.\n  #\n  # event - A click Event.\n  #\n  # Returns nothing\n  _onNextClick: (event) =>\n    this._findNextHighlight()\n\n  # Locates the previous highlighted element in @highlights from the current one\n  # or goes to the very last element.\n  #\n  # event - A click Event.\n  #\n  # Returns nothing\n  _onPreviousClick: (event) =>\n    this._findNextHighlight true\n\n  # Scrolls to the highlight provided. An adds an active class to it.\n  #\n  # highlight - Either highlight Element or an Array of elements. This value\n  #             is usually retrieved from annotation.highlights.\n  #\n  # Returns nothing.\n  _scrollToHighlight: (highlight) ->\n    highlight = $(highlight)\n\n    @highlights.removeClass(@classes.hl.active)\n    highlight.addClass(@classes.hl.active)\n\n    $('html, body').animate({\n      scrollTop: highlight.offset().top - (@element.height() + 20)\n    }, 150)\n\n  # Clears the relevant input when the clear button is clicked.\n  #\n  # event - A click Event object.\n  #\n  # Returns nothing.\n  _onClearClick: (event) ->\n    $(event.target).prev('input').val('').keyup().blur()\n\nAnnotator.Plugin.register('Filter', Filter)\n\nmodule.exports = Filter\n"]}