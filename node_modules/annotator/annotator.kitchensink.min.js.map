{"version":3,"file":"annotator.kitchensink.min.js","sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","namespace.coffee","plugin/kitchensink.coffee"],"names":[],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# In order to build portable extension bundles that can be used with AMD and\n# script concatenation plugins are built with this module as 'annotator'.\n\n# Annotator will export itself globally when the built UMD modules are used in\n# a legacy environment of simple script concatenation.\nself = self if self?\nself ?= global if global?\nself ?= window if window?\nAnnotator = self?.Annotator\n\n# In a pure AMD environment, Annotator may not be exported globally.\nAnnotator ?= if self?.define?.amd then self?.require('annotator')\n\n# If we haven't successfully loaded Annotator by this point, there's no point in\n# going on to load the plugin, so throw a fatal error.\nif typeof Annotator isnt 'function'\n  throw new Error(\"Could not find Annotator! In a webpage context, please ensure\n                   that the Annotator script tag is loaded before any plugins.\")\n\n# Note: when working in a CommonJS environment and bundling requirements into\n# applications then require calls should refer to modules from the npm lib\n# directory of annotator package and avoid this altogether.\nmodule.exports = Annotator\n","Annotator = require('annotator')\n$ = Annotator.Util.$\n\n\n# Public: A initialization function that sets up the Annotator and some of the\n# default plugins. Intended for use with the annotator-full package.\n#\n# NOTE: This method is intened to be called via the jQuery .annotator() method\n# although it is available directly on the Annotator instance.\n#\n# config  - An object containing config options for the AnnotateIt store.\n#             storeUrl: API endpoint for the store (default:\n#                       \"http://annotateit.org/api\")\n#             tokenUrl: API endpoint for auth token provider (default:\n#                       \"http://annotateit.org/api/token\")\n#\n# options - An object containing plugin settings to override the defaults.\n#           If a plugin is entered with a 'falsy' value, the plugin will not be\n#           loaded.\n#\n# Examples\n#\n#   $('#content').annotator().annotator('setupPlugins');\n#\n#   // Only display a filter for the user field and disable tags.\n#   $('#content').annotator().annotator('setupPlugins', null, {\n#     Tags: false,\n#     Filter: {\n#       filters: [{label: 'User', property: 'user'}],\n#       addAnnotationFilter: false\n#     }\n#   });\n#\n# Returns itself for chaining.\n# coffeelint: disable=missing_fat_arrows\nAnnotator::setupPlugins = (config = {}, options = {}) ->\n  win = Annotator.Util.getGlobal()\n\n  # Set up the default plugins.\n  plugins = [\n    'Unsupported',\n    'Auth',\n    'Tags',\n    'Filter',\n    'Store',\n    'AnnotateItPermissions'\n  ]\n\n  # If Showdown is included add the Markdown plugin.\n  if win.Showdown\n    plugins.push('Markdown')\n\n  # Check the config for store credentials and add relevant plugins.\n  uri = win.location.href.split(/#|\\?/).shift() or ''\n\n  pluginConfig =\n    Tags: {}\n    Filter:\n      filters: [\n        {label: Annotator._t('User'), property: 'user'}\n        {label: Annotator._t('Tags'), property: 'tags'}\n      ]\n    Auth:\n      tokenUrl: config.tokenUrl or 'http://annotateit.org/api/token'\n    Store:\n      prefix: config.storeUrl or 'http://annotateit.org/api'\n      annotationData:\n        uri: uri\n      loadFromSearch:\n        uri: uri\n\n  for own name, opts of options\n    if name not in plugins\n      plugins.push(name)\n\n  $.extend true, pluginConfig, options\n\n  for name in plugins\n    if name not of pluginConfig or pluginConfig[name]\n      this.addPlugin(name, pluginConfig[name])\n  # coffeelint: enable=missing_fat_arrows\n"]}