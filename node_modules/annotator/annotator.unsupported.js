/*
** Annotator v2.0.0-dev-41928d6
** https://github.com/okfn/annotator/
**
** Copyright 2014, the Annotator project contributors.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-11 02:53:44Z
*/
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var n;"undefined"!=typeof window?n=window:"undefined"!=typeof global?n=global:"undefined"!=typeof self&&(n=self);var o=n;o=o.Annotator||(o.Annotator={}),o=o.Plugin||(o.Plugin={}),o.Unsupported=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"4hR4NO":[function(_dereq_,module,exports){
(function (global){
var Annotator, self, _ref;

if (typeof self !== "undefined" && self !== null) {
  self = self;
}

if (typeof global !== "undefined" && global !== null) {
  if (self == null) {
    self = global;
  }
}

if (typeof window !== "undefined" && window !== null) {
  if (self == null) {
    self = window;
  }
}

Annotator = self != null ? self.Annotator : void 0;

if (Annotator == null) {
  Annotator = (self != null ? (_ref = self.define) != null ? _ref.amd : void 0 : void 0) ? self != null ? self.require('annotator') : void 0 : void 0;
}

if (typeof Annotator !== 'function') {
  throw new Error("Could not find Annotator! In a webpage context, please ensure that the Annotator script tag is loaded before any plugins.");
}

module.exports = Annotator;


}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"annotator":[function(_dereq_,module,exports){
module.exports=_dereq_('4hR4NO');
},{}],3:[function(_dereq_,module,exports){
var $, Annotator, Unsupported, _t;

Annotator = _dereq_('annotator');

$ = Annotator.Util.$;

_t = Annotator._t;

Unsupported = (function() {
  Unsupported.prototype.options = {
    message: _t("Sorry your current browser does not support the Annotator")
  };

  function Unsupported(options) {
    this.options = $.extend(true, {}, this.options, options);
  }

  Unsupported.prototype.pluginInit = function() {
    if (!Annotator.supported()) {
      return $((function(_this) {
        return function() {
          Annotator.showNotification(_this.options.message);
          if ((window.XMLHttpRequest === void 0) && (ActiveXObject !== void 0)) {
            return $('html').addClass('ie6');
          }
        };
      })(this));
    }
  };

  return Unsupported;

})();

Annotator.Plugin.register('Unsupported', Unsupported);

module.exports = Unsupported;


},{}]},{},[3])

(3)
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGtnL2Fubm90YXRvci51bnN1cHBvcnRlZC5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIm5hbWVzcGFjZS5jb2ZmZWUiLCJwbHVnaW4vdW5zdXBwb3J0ZWQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQ0tBOzs7U0FBTyxJQUFQOzs7QUFDQTs7V0FBUTtHQUFSO0NBREE7O0FBRUE7O1dBQVE7R0FBUjtDQUZBOzs7OztFQU1BLHNCQUFhO0NBTmI7O0FBVUE7QUFDRSxRQUFVLFVBQU0sb0JBRGxCO0NBVkE7Ozs7Ozs7Ozs7QUNMQTs7WUFBWSxRQUFRLFdBQVIsQ0FBWjs7Q0FDQSxHQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FEbkI7O0VBRUEsR0FBSyxTQUFTLENBQUMsRUFGZjs7O0FBUUUsa0NBQ0U7YUFBUyxHQUFHLDJEQUFILENBQVQ7R0FERjs7QUFHYSx1QkFBQyxPQUFEO0FBQ1gsUUFBQyxRQUFELEdBQVcsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFULEVBQWUsRUFBZixFQUFtQixJQUFDLFFBQXBCLEVBQTZCLE9BQTdCLENBQVgsQ0FEVztHQUhiOzt3QkFVQSxhQUFZO0FBQ1Ysa0JBQWdCLENBQUMsU0FBVixFQUFQO2FBQ0UsRUFBRTs7QUFFQSxtQkFBUyxDQUFDLGdCQUFWLENBQTJCLEtBQUMsUUFBTyxDQUFDLE9BQXBDO0FBSUEsY0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFQLEtBQXlCLE1BQTFCLEtBQXlDLENBQUMsa0JBQWlCLE1BQWxCLENBQTVDO21CQUNFLEVBQUUsTUFBRixDQUFTLENBQUMsUUFBVixDQUFtQixLQUFuQixFQURGO1dBTkE7O2NBQUYsRUFERjtLQURVO0dBVlo7Ozs7SUFSRjs7U0E4QlMsQ0FBQyxNQUFNLENBQUMsUUFBakIsQ0FBMEIsYUFBMUIsRUFBeUMsV0FBekMsQ0E5QkE7O01BZ0NNLENBQUMsT0FBUCxHQUFpQixXQWhDakIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMgSW4gb3JkZXIgdG8gYnVpbGQgcG9ydGFibGUgZXh0ZW5zaW9uIGJ1bmRsZXMgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIEFNRCBhbmRcbiMgc2NyaXB0IGNvbmNhdGVuYXRpb24gcGx1Z2lucyBhcmUgYnVpbHQgd2l0aCB0aGlzIG1vZHVsZSBhcyAnYW5ub3RhdG9yJy5cblxuIyBBbm5vdGF0b3Igd2lsbCBleHBvcnQgaXRzZWxmIGdsb2JhbGx5IHdoZW4gdGhlIGJ1aWx0IFVNRCBtb2R1bGVzIGFyZSB1c2VkIGluXG4jIGEgbGVnYWN5IGVudmlyb25tZW50IG9mIHNpbXBsZSBzY3JpcHQgY29uY2F0ZW5hdGlvbi5cbnNlbGYgPSBzZWxmIGlmIHNlbGY/XG5zZWxmID89IGdsb2JhbCBpZiBnbG9iYWw/XG5zZWxmID89IHdpbmRvdyBpZiB3aW5kb3c/XG5Bbm5vdGF0b3IgPSBzZWxmPy5Bbm5vdGF0b3JcblxuIyBJbiBhIHB1cmUgQU1EIGVudmlyb25tZW50LCBBbm5vdGF0b3IgbWF5IG5vdCBiZSBleHBvcnRlZCBnbG9iYWxseS5cbkFubm90YXRvciA/PSBpZiBzZWxmPy5kZWZpbmU/LmFtZCB0aGVuIHNlbGY/LnJlcXVpcmUoJ2Fubm90YXRvcicpXG5cbiMgSWYgd2UgaGF2ZW4ndCBzdWNjZXNzZnVsbHkgbG9hZGVkIEFubm90YXRvciBieSB0aGlzIHBvaW50LCB0aGVyZSdzIG5vIHBvaW50IGluXG4jIGdvaW5nIG9uIHRvIGxvYWQgdGhlIHBsdWdpbiwgc28gdGhyb3cgYSBmYXRhbCBlcnJvci5cbmlmIHR5cGVvZiBBbm5vdGF0b3IgaXNudCAnZnVuY3Rpb24nXG4gIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIEFubm90YXRvciEgSW4gYSB3ZWJwYWdlIGNvbnRleHQsIHBsZWFzZSBlbnN1cmVcbiAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBBbm5vdGF0b3Igc2NyaXB0IHRhZyBpcyBsb2FkZWQgYmVmb3JlIGFueSBwbHVnaW5zLlwiKVxuXG4jIE5vdGU6IHdoZW4gd29ya2luZyBpbiBhIENvbW1vbkpTIGVudmlyb25tZW50IGFuZCBidW5kbGluZyByZXF1aXJlbWVudHMgaW50b1xuIyBhcHBsaWNhdGlvbnMgdGhlbiByZXF1aXJlIGNhbGxzIHNob3VsZCByZWZlciB0byBtb2R1bGVzIGZyb20gdGhlIG5wbSBsaWJcbiMgZGlyZWN0b3J5IG9mIGFubm90YXRvciBwYWNrYWdlIGFuZCBhdm9pZCB0aGlzIGFsdG9nZXRoZXIuXG5tb2R1bGUuZXhwb3J0cyA9IEFubm90YXRvclxuIiwiQW5ub3RhdG9yID0gcmVxdWlyZSgnYW5ub3RhdG9yJylcbiQgPSBBbm5vdGF0b3IuVXRpbC4kXG5fdCA9IEFubm90YXRvci5fdFxuXG4jIFBsdWdpbiB0aGF0IHdpbGwgZGlzcGxheSBhIG5vdGlmaWNhdGlvbiB0byB0aGUgdXNlciBpZiB0aGVpciBicm93c2VyIGRvZXNcbiMgbm90IHN1cHBvcnQgdGhlIEFubm90YXRvci5cbmNsYXNzIFVuc3VwcG9ydGVkXG4gICMgT3B0aW9ucyBPYmplY3QsIG1lc3NhZ2Ugc2V0cyB0aGUgbWVzc2FnZSBkaXNwbGF5ZWQgaW4gdGhlIGJyb3dzZXIuXG4gIG9wdGlvbnM6XG4gICAgbWVzc2FnZTogX3QoXCJTb3JyeSB5b3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBBbm5vdGF0b3JcIilcblxuICBjb25zdHJ1Y3RvcjogKG9wdGlvbnMpIC0+XG4gICAgQG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgQG9wdGlvbnMsIG9wdGlvbnMpXG5cbiAgIyBQdWJsaWM6IENoZWNrcyB0aGUgQW5ub3RhdG9yLnN1cHBvcnRlZCgpIG1ldGhvZCBhbmQgaWYgdW5zdXBwb3J0ZWQgZGlzcGxheXNcbiAgIyBAb3B0aW9ucy5tZXNzYWdlIGluIGEgbm90aWZpY2F0aW9uLlxuICAjXG4gICMgUmV0dXJucyBub3RoaW5nLlxuICBwbHVnaW5Jbml0OiAtPlxuICAgIHVubGVzcyBBbm5vdGF0b3Iuc3VwcG9ydGVkKClcbiAgICAgICQoPT5cbiAgICAgICAgIyBPbiBkb2N1bWVudCBsb2FkIGRpc3BsYXkgbm90aWZpY2F0aW9uLlxuICAgICAgICBBbm5vdGF0b3Iuc2hvd05vdGlmaWNhdGlvbihAb3B0aW9ucy5tZXNzYWdlKVxuXG4gICAgICAgICMgQWRkIGEgY2xhc3MgaWYgd2UncmUgaW4gSUU2LiBBIGJpdCBvZiBhIGhhY2sgYnV0IHdlIG5lZWQgdG8gYmUgYWJsZVxuICAgICAgICAjIHRvIHNldCB0aGUgbm90aWZpY2F0aW9uIHBvc2l0aW9uIGluIHRoZSBDU1MuXG4gICAgICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPT0gdW5kZWZpbmVkKSBhbmQgKEFjdGl2ZVhPYmplY3QgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICQoJ2h0bWwnKS5hZGRDbGFzcygnaWU2JylcbiAgICAgIClcblxuQW5ub3RhdG9yLlBsdWdpbi5yZWdpc3RlcignVW5zdXBwb3J0ZWQnLCBVbnN1cHBvcnRlZClcblxubW9kdWxlLmV4cG9ydHMgPSBVbnN1cHBvcnRlZFxuIl19