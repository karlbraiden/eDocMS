tinymce.PluginManager.add('annotate', function (editor, url) {
    editor.addButton('annotate', { title: 'Insert/edit annotation', image: url + '/img/annotation.png', onclick: showDialog, onpostrender: monitorNodeChange }); editor.addButton('delete-annotation', { title: 'Remove annotation', image: url + '/img/delete-annotation.png', onclick: deleteAnnotation, onpostrender: monitorNodeChange }); editor.addMenuItem('annotate', { text: 'Annotate', image: url + '/img/annotation.png', context: 'tools', onclick: showDialog }); var selectionBookmark; function monitorNodeChange() { var btn = this; editor.on('NodeChange', function (e) { btn.active(isAnnotation(editor.selection.getNode())) }); editor.on('dblclick', function (e) { if (annotationSelected = isAnnotation(e.target)) { btn.active(annotationSelected); showTooltip(e, $(e.target)[0].closest('.annotation')) } }) }
    function showTooltip(e, elm) {
        var tooltipText = editor.dom.getAttrib(elm, 'data-annotation-value'); var xPos = e.clientX + Math.max(Math.round($('#canvas_ifr').offset().left) - ($('#editPaperWindow').width() / 2), 0); var yPos = e.clientY + Math.round($('#canvas_ifr').offset().top) - $('#editPaperWindow').height() - 30; if ($('#editPaperWindow').offset().left + $('#editPaperWindow').width() > $(window).width()) { xPos = $(window).width() - $('#editPaperWindow').width() - 30 }
        $('#editPaperWindow').html(HTMLfromStr(tooltipText)); $('#editPaperWindow').css({ "left": xPos + "px", "top": yPos + "px", "display": "block" })
    }
    function HTMLfromStr(rawStr) { return (rawStr + "").replace(/&#\d+;/gm, function (s) { return String.fromCharCode(s.match(/\d+/gm)[0]) }) }
    function isAnnotation(elm) { var tempElem = $(elm).closest('.annotation'); return elm && ($(tempElem).hasClass("annotation")) ? !0 : !1 }
    function getAnnotation(elm) { return $(elm).closest('.annotation') }
    function toggleTemplates(elemID) { tagSelectedValue = elemID; templateArray = new Array(); templateArrayPointer = -1; var tagTemplates = $('.tag-template[data-tag-template-id="' + elemID + '"]'); $(tagTemplates).each(function (index, elem) { templateArray = ($(elem).attr('data-tag-template-value').split('|||')) }) }
    function showDialog() {
        $(editor.dom.getRoot()).find("[data-mce-type='bookmark']").remove(); var data = {}; var value = "", initialText = "", selectedTag = "null"; templateArrayPointer = -1; var selectedNode = editor.selection.getNode(); annotationSelected = isAnnotation(selectedNode); if (annotationSelected) { var selectedNode = getAnnotation(selectedNode); editor.selection.select($(selectedNode)[0]); value = HTMLfromStr(editor.dom.getAttrib(selectedNode, 'data-annotation-value')); value = value.replace(/<br\s\/>/ig, '\n'); initialText = data.text = $(selectedNode).html(); selectedTag = editor.dom.getAttrib(selectedNode, 'data-annotation-tag') } else { initialText = getSelectedText() || "" }
        if (initialText == "") { editor.windowManager.alert("Please select some text or an existing annotation first."); return !1 }
        data.text = pToBr(initialText); selectionBookmark = editor.selection.getBookmark(); data.params = []; var tags = $('.tag'); if (tags.length > 0) {
            var listBox = { type: "listbox", name: "annotationTag", label: "Writing features", onselect: function () { toggleTemplates(this.value()) }, onPostRender: function () { this.getEl().previousSibling.innerHTML = "Writing features <span style=\"color:#ff0000\">*</span>" } }; var listBoxOptions = [{ text: "- - -", value: "null" }]; $(tags).each(function (index, elem) { var selectionListItem = { text: $(elem).attr('data-tag-value'), value: $(elem).attr('data-tag-id') }; listBoxOptions.push(selectionListItem) }); listBox.values = listBoxOptions; listBox.value = selectedTag; toggleTemplates(listBox.value); data.params.push(listBox); data.params.push({
                type: 'button', name: 'button', id: 'toggleTemplatesButton', label: 'Templates', text: 'Next template', onclick: function (e) {
                    if (!templateArray[++templateArrayPointer]) { templateArrayPointer = 0 }
                    $('#annotationField').val(templateArray[templateArrayPointer])
                }
            })
        }
        data.params.push({ type: "textbox", id: "annotationField", name: "annotationField", minWidth: 340, minHeight: 150, multiline: !0, label: '', value: value }); data.params.push({ type: "container", html: "Tip: Double-click an annotation within the editor to preview it." }); editor.windowManager.open({
            title: 'Annotation', body: data.params, onsubmit: function (e) {
                var canSubmit = !0; if (typeof (tagSelectedValue) !== 'undefined') { if (tagSelectedValue == "null" || tagSelectedValue == "") { editor.windowManager.alert("Please select a writing feature."); canSubmit = !1; return !1 } }
                if (!annotationSelected && e.data.annotationField.trim() == '') { editor.windowManager.alert("The annotation cannot be blank."); canSubmit = !1; return !1 }
                function createAnnotation() {
                    var annotationValue = strToHTML(e.data.annotationField); if (annotationSelected) {
                        if (e.data.annotationField.trim() == '') { deleteAnnotation(selectedNode); editor.selection.collapse(!1) } else { $(selectedNode).attr('data-annotation-value', annotationValue); $(selectedNode).attr('data-annotation-tag', e.data.annotationTag) }
                        if (initialText != data.text) { selectedNode.innerText = data.text }
                    } else { var leadingSpace = (data.text.search(/^\ /) == 0) ? " " : ""; var trailingSpace = (data.text.search(/\ $/) > 0) ? " " : ""; annotationValue = annotationValue.replace(/"/g, '&quot;'); var replacementHTML = leadingSpace + '<span class="annotation" data-annotation-value="' + annotationValue + '" data-annotation-tag="' + e.data.annotationTag + '">' + data.text.trim() + '</span>' + trailingSpace; var bodyText = $(editor.dom.getRoot()).html(); var re = /(<span class="annotation"[^>]+>)*(<em>|<i>|<strong>|<b>)?(<span data-mce-type="bookmark" id="mce_[0-9]+_start"[^>]*>).*<\/span>.*(<span data-mce-type="bookmark" id="mce_[0-9]+_end"[^>]*>).*ï»¿<\/span>/mi; bodyText = bodyText.replace(re, "</em></strong>" + replacementHTML + "$3</span>"); editor.dom.setHTML(editor.dom.getRoot(), bodyText); editor.selection.moveToBookmark(selectionBookmark) }
                }
                function insertAnnotation() { editor.undoManager.transact(createAnnotation) }
                insertAnnotation(); if (!canSubmit) { return !1 }
            }
        })
    }
    function pToBr(selectionString) { selectionString = selectionString.replace(/^<p>/, ""); selectionString = selectionString.replace(/<\/p>$/, ""); selectionString = selectionString.replace(/<\/p>[\n\s\t]*<p>/g, "<br /><br />"); return selectionString }
    function strToHTML(rawStr) { rawStr = rawStr.replace(/[\r\n]/g, '<br />'); return rawStr.replace(/[\u00A0-\u9999<>\&]/gm, function (i) { return '&#' + i.charCodeAt(0) + ';' }) }
    function HTMLfromStr(rawStr) { return (rawStr + "").replace(/&#\d+;/gm, function (s) { return String.fromCharCode(s.match(/\d+/gm)[0]) }) }
    function deleteAnnotation(deletionNode) {
        if (!isAnnotation(deletionNode)) { deletionNode = getAnnotation(editor.selection.getNode()); annotationSelected = isAnnotation(deletionNode) }
        if (annotationSelected) { selectedText = $(deletionNode).html(); editor.dom.remove(deletionNode, selectedText); editor.selection.collapse(!1); editor.undoManager.add() }
    }
    function getSelectedText() { return editor.selection.getContent().replace(/[\r\n]*<p>&nbsp;<\/p>$/, '') || !1 }
})